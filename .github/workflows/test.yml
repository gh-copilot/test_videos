name: test

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  RESOLUTION: '720p'

jobs:
  down:
    runs-on: ubuntu-latest
    name: "${{ matrix.name }} - ${{ matrix.fps }} fps"
    defaults:
      run:
        shell: bash -l {0}
    
    strategy:
      fail-fast: false
      matrix:
        fps: [10, 20, 'native']
        
        include:
          - name: Thor_Reaction
          
          - name: Hocus_Pocus
            url: 'https://www.youtube.com/watch?v=40SXyDeXV9Y'
#             start: '0:05:20'
#             end: '0:07:10'

#           - name: Peaky_Blinders
#             url: 'https://www.youtube.com/watch?v=LosFc1-eva4'
          
#           - name: Avengers_Endgame
#             url: 'https://www.youtube.com/watch?v=SdC-4x0-ESc'
          
#           - name: Hell_March_Indian_Army
#             url: 'https://www.youtube.com/watch?v=geKIYFkqkh0'

#           - name: V1
#           - name: V2
#           - name: V3
#           - name: V4
#           - name: V5
#           - name: V6
#           - name: V7
#           - name: V8
#           - name: V9
#           - name: V10
#           - name: V11
          
    steps:

      - name: Install Dependencies
        run: |
            sudo apt update
            sudo apt install aria2 ffmpeg python3-mutagen python3-pycryptodome p7zip-full
            pip3 install yt-dlp

      - name: Checkout Feelback
        uses: actions/checkout@v3
        with:
          repository: ahmedx3/Feelback
          token: ${{ secrets.TOKEN }}
      
      - name: Checkout This Repo
        uses: actions/checkout@v3
        with:
          path: download

      - name: Download Video
        working-directory: download
        if: matrix.url
        run: python3 download.py -f "$RESOLUTION" -o "${{ matrix.name }}" "${{ matrix.url }}"

      - name: Trim Video
        working-directory: download
        if: matrix.start && matrix.start
        run: |
          ffmpeg -i "${{ matrix.name }}.mp4" -ss "${{ matrix.start }}" -to "${{ matrix.end }}" -c copy "${{ matrix.name }}_out.mp4"
          mv "${{ matrix.name }}_out.mp4" "${{ matrix.name }}.mp4"

      - name: Copy Video File
        run: |
          cp "./download/videos/${{ matrix.name }}.mp4" . || echo ""
          cp "./download/${{ matrix.name }}.mp4" . || echo ""

      - name: create feelback conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge,defaults
          auto-activate-base: false
          auto-update-conda: true
          activate-environment: feelback
          environment-file: requirements.yml

      - name: Export Env Variables
        run: |
          time=`date --utc '+%F:%Hh'`
          echo "TIME=${time}" >> $GITHUB_ENV
          
          DUMP_FORMAT="${{ matrix.name }}_${{ matrix.fps }}_fps_${RESOLUTION}_${time}"
          echo "DUMP_FORMAT=${DUMP_FORMAT}" >> $GITHUB_ENV
          
          tag=$(date --utc '+%Y%H%M%S')
          echo "TAG_NAME=${tag}" >> $GITHUB_ENV
          
          echo "FEELBACK_DUMP=feelback_${DUMP_FORMAT}.pickle" >> $GITHUB_ENV
          
          mkdir output
          
      - name: Process Video with Feelback
        run: python3 feelback_cli.py "${{ matrix.name }}.mp4" -f "${{ matrix.fps }}" --dump "${FEELBACK_DUMP}" -vvv 
        
      - name: Store Annotated Video [All]
        run: python3 feelback_cli.py "${{ matrix.name }}.mp4" --load "${FEELBACK_DUMP}" --output-annotations all  -o "./output/${DUMP_FORMAT}_all_annotations" -vvv  
        
      - name: Store Annotated Video [IDs]
        run: python3 feelback_cli.py "${{ matrix.name }}.mp4" --load "${FEELBACK_DUMP}" --output-annotations ids  -o "./output/${DUMP_FORMAT}_ids_annotations" -vvv  
        
      - name: Store Annotated Video [Only Faces]
        run: python3 feelback_cli.py "${{ matrix.name }}.mp4" --load "${FEELBACK_DUMP}" --output-annotations none -o "./output/${DUMP_FORMAT}_position_annotations" -vvv  

      - name: Store Key Moments Plot
        run: python3 feelback_cli.py "${{ matrix.name }}.mp4" --load "${FEELBACK_DUMP}" --output-key-moments "./output/${DUMP_FORMAT}_key_moments.png" -vvv  

      - name: Prepare Backend Env
        run: |
          cat <<EOF >>.env
          FLASK_RUN_HOST="127.0.0.1"
          FLASK_RUN_PORT=5000
          FLASK_ENV=production
          UPLOAD_FOLDER=$PWD/uploads
          ANNOTATED_UPLOAD_FOLDER=$PWD/uploads_annotated
          THUMBNAILS_FOLDER=$PWD/thumbnails
          DATABASE_URL="sqlite:///$PWD/${DUMP_FORMAT}_database.db"
          EOF

      - name: Seed Backend Database
        run: |
          python3 seed_backend.py "${{ matrix.name }}.mp4" --load-feelback "${FEELBACK_DUMP}"
          7z a "${DUMP_FORMAT}_thumbnails.zip" ./thumbnails
      
      - name: Encode Videos to reduce their size
        run: |
          mkdir new
          cd output
          for video in *.mp4; do
            filename=`python -c "print('${video}'.rstrip('.mp4'))"`
            
            ffmpeg -i "${video}" -vcodec libx264 -crf 20 "../new/${filename}_x264.mp4"
            ffmpeg -i "${video}" -vcodec libx265 -crf 28 "../new/${filename}_x265.mp4"
            
            mv ../new/*.mp4 .
          done
      
      - run: ls -lRh
        continue-on-error: true
        if: always()
      
      - name: Release Files
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          tag_name: "${{ env.TAG_NAME }}_${{ matrix.name }}_${{ matrix.fps }}"
          name: "${{ matrix.name }} Analysis - ${{ matrix.fps }} fps"
          files: |
            ./output/*
            *.pickle
            *.db
            *thumbnails*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
